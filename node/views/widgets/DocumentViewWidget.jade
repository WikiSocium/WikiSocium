extends BaseWidget

block widget
  - if (widget.label != undefined)
    label
      - if (widget.label.name == undefined)
        | !{widget.label}
      - else
        | !{widget.label.name}
  .document_container
    .span7.document_textarea
      .document_view(id="documentView_"+widget.doc_name)
    .span5
      .document_organizations(id="documentOrganizationsView_" + widget.doc_name).accordion
      div
        span#rtf_btn.btn.btn-primary.documentButtons Скачать документ
        span#print_btn.btn.print_btn Распечатать

  // Organization record template
  // 
  script#documentOrganizationTemplate(type="text/x-jquery-tmpl")
    div.accordion-group
      div.accordion-heading
        div(style="float: right; padding: 4px 5px 3px; width: 115px")
          a.btn.documentOrganizationTimer(
            href="#",
            rel="tooltip",
            data-toggle="tooltip",
            data-placement="right",
            org_title="${Organization_Id}",
            org_time="${Waiting_time}",
            style="width: 93px;"
            )
        a.accordion-toggle(
          data-toggle="collapse",
          data-parent="#documentOrganizationsView_" + widget.doc_name,
          href="#collapse-${Collapse_Index}",
          style="padding-right: 130px"
          ) ${Organization_Name}
      div.accordion-body.collapse(id="collapse-${Collapse_Index}")
        .accordion-inner
          p Время ответа: ${Waiting_time} дней
          p {{html Description}}

  // Print- and save- buttons behaviour
  script(type="text/javascript")  
    function checkValue(value)
    {
      if(typeof(value) != "undefined")
        return value;
      else
        return "No value was found";    
    }
    function changeTimerButtonState ( selector, action ) {
      switch( action )
      {
        case "start-timer":
          selector.addClass("timer-activated");
          selector.html("отправлено");
          selector.addClass("btn-success");
          selector.tooltip('hide').data('tooltip', false);
          selector.tooltip( {
              title: ''
          } );
          break;
        case "stop-timer":
          selector.removeClass("timer-activated");
          selector.html("не отправлено");
          selector.removeClass("btn-success");
          selector.tooltip('hide').data('tooltip', false);
          selector.tooltip( {
              title: 'Нажмите на эту кнопку после отправки документа'
          } );
          break;
        case "toggle":
          break;
      }
    }
    $("#rtf_btn").click(function()
    {
        var html=$("#documentView_#{widget.doc_name}").html();        
        // Отправляем html на сервер, получаем rtf в ответ.
        $.post('/OpenDocument', '&text=' + encodeURIComponent(html), function(res) {
                //- Добавляем невидимый фрейм для скачивания документа без редиректа.
                $("body").append("<iframe src='" + "./../" + res + "' style='display: none;' ></iframe>");
            });
    });    
    $("#print_btn").click(function()
    {
        var modal_title = "Документ!";
        var html=$("#documentView_#{widget.doc_name}").html();
        var printWin = window.open("","Документ");
        printWin.document.open();
        printWin.document.write(html);
        printWin.document.close();
    });

  - if (typeof(widget.user_organizations) != "undefined")
    script
      var user_organizations = !{JSON.stringify(widget.user_organizations)};
  - else
    script
      var user_organizations = []; 

  script    
    step#{step_id}FieldsList['!{widget.id}'] = new DocumentViewWidget(!{JSON.stringify(value)});
    ( function()
      {
        var #{widget.doc_name}_initDocumentWidgetFunction = function()
        {
          var times = !{JSON.stringify(widget.organizations_times)};
          RegionalizedData.GetDataFromDBWithRegion (
              GetUserRegion(),
              'organizations',
              !{JSON.stringify(widget.organizations)},
              function(fetchedData) {
                $("#documentOrganizationsView_#{widget.doc_name}").hide();
                $("#documentOrganizationsView_#{widget.doc_name}").children().remove();
                //
                for (var yauo in user_organizations) {
                  var yauo_obj = {
                    short_description : "user organization",
                    description: {}
                  };
                  //   
                  var allWidgetsDataArgument = CollectFormData();              
                  if ( typeof(user_organizations[yauo].description) != "undefined" ) {
                    for ( var d in user_organizations[yauo].description ) {
                      if ( typeof(allWidgetsDataArgument[user_organizations[yauo].description[d]]) != "undefined" ) {       
                        yauo_obj.description[d] = allWidgetsDataArgument[user_organizations[yauo].description[d]];
                      }
                    }
                  }
                  //
                  if(typeof(allWidgetsDataArgument[user_organizations[yauo].widget_id]) != "undefined") {
                    yauo_obj.title = allWidgetsDataArgument[user_organizations[yauo].widget_id];
                  }
                  //
                  fetchedData.push([[yauo_obj]]);
                  times.push(user_organizations[yauo].wait_time);
                }
                //
                //
                //
                if(fetchedData.length > 0)
                  $("#documentOrganizationsView_#{widget.doc_name}").show();
                else
                  GenerateDocument_#{widget.doc_name}();
                var collapse_index = 0;
                for (var k = 0; k < fetchedData.length; k++)
                {
                  var data = fetchedData[k];
                  for (var i = 0; i < data.length; i++)
                  {    
                      for (var j = 0; j < data[i].length; j++)
                      {
                          var aData = data[i][j];
                          var title = data[i][j]["title"];
                          //
                          var org_data = {
                              "Organization_Name": title,
                              "Organization_Id": escape(title),
                              "Waiting_time": times[k],
                              "Collapse_Index": collapse_index
                          };
                          collapse_index++;
                          console.log( data[i][j]["description"] );                          
                          var description = data[i][j]["description"]
                          var fields = [ "text", "postal_address", "electronic_address" ];
                          org_data["Description"] = "";
                          for( var key in fields ) {
                            if (typeof description[fields[key]] != 'undefined' && description[fields[key]] != "" ) {
                              switch( fields[key] ) {
                                case "postal_address":
                                  text = "Почтовый адрес: " + description[fields[key]];
                                  break;
                                case "electronic_address":
                                  text = "";
                                  if (typeof description[fields[key]]["webform"] != 'undefined' && description[fields[key]]["webform"] != "" ) {
                                    text += "<a href=\"" + description[fields[key]]["webform"] + "\">Интернет-приёмная</a>";
                                  }
                                  break;
                                default:
                                  text = description[fields[key]];
                              }
                              org_data["Description"] += "<p>" + text + "</p>";
                            }
                          }
                          //
                          if(k == 0 && i == 0 && j == 0) {
                            GenerateDocument_#{widget.doc_name}(data[i][j]);
                          }
                          //
                          var rec = $("#documentOrganizationTemplate").tmpl(org_data);
                          $(rec).click(
                            ( function(aData) {
                              return function(event) {
                                GenerateDocument_#{widget.doc_name}(aData);  
                              };
                            } )(aData)
                          );
                          //                          
                          var savedValue = step#{step_id}FieldsList['!{widget.id}'].getValue();
                          if ( typeof(savedValue[escape(title)]) != "undefined" ) {
                            // rec.find('.documentOrganizationTimer').addClass("timer-activated");
                            changeTimerButtonState( rec.find('.documentOrganizationTimer'), 'start-timer' );
                          } else {                            
                            changeTimerButtonState( rec.find('.documentOrganizationTimer'), 'stop-timer' );
                          }
                          $("#documentOrganizationsView_#{widget.doc_name}").append(rec);
                          $("[rel='tooltip']").tooltip();
                          $("#documentOrganizationsView_#{widget.doc_name}").find("#collapse-0").addClass('in');
                      }
                  }
                }
                //
                $(".documentOrganizationTimer").click( function() {
                  if ( $(this).hasClass( "timer-activated" ) ) {
                    changeTimerButtonState( $(this), 'stop-timer' );
                    delete step#{step_id}FieldsList['!{widget.id}'].timersValues[$(this).attr("org_title")];
                  } else {
                    changeTimerButtonState( $(this), 'start-timer' );
                    step#{step_id}FieldsList['!{widget.id}'].timersValues[$(this).attr("org_title")] = {
                      beginDate: new Date(),
                      interval: $(this).attr("org_time")
                    };
                    console.log( step#{step_id}FieldsList['!{widget.id}'].timersValues );
                    console.log( JSON.stringify ( step#{step_id}FieldsList['!{widget.id}'].timersValues ) );
                  }
                });
              }
          );
        };
        //
        $("#documentView_#{widget.doc_name}").closest(".step").watch("display", function() {     
          // Only regenerate document, organizations should be leaved unchanged
          // GenerateDocument_#{widget.doc_name}();
          
          // No, organizations list may change too
          #{widget.doc_name}_initDocumentWidgetFunction();
        }, 100, "");
        //
        if ( $("#documentView_#{widget.doc_name}").closest(".step").is(":visible") ) {
          setTimeout (function() {
            #{widget.doc_name}_initDocumentWidgetFunction();
          }, 1000); // [TODO] #(document).ready() doesn't work properly
        }
      }
    )();