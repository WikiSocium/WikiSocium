extends BaseWidget

block content  
  <div class="document_container">
  <div class="document_textarea">
  <div id="documentView_#{widget.doc_name}" class="gray-rounded-corners document_view"></div>
  </div>
  <div id="documentOrganizationsView_#{widget.doc_name}" class="document_organizations gray-rounded-corners gray-rounded-block2"></div>
  </div>
  <div class="btn btn-primary documentButtons" onclick="GeneratePDFFrom(#documentView_#{widget.doc_name})">PDF</div>
  <input type="button" id="print_btn" value="Распечатать" id="print_btn"/>
  script(type="text/javascript")
    $("#print_btn").click(function()
    {
    var modal_title = "Документ!";
    var html=$("#documentView_#{widget.doc_name}").html();
    var printWin = window.open("","Документ");
    printWin.document.open();
    printWin.document.write(html);
    printWin.document.close();
    //printWin.print();
    //var dname="#{widget.doc_name}";
    //$.ajax({
    //    url: '/OpenDocument'
    //    , type:'POST'
    //    , data: '&text=' + html
    //    , success: function(res) {
    //        window.open('../../'+res);
    //    }
    //    , error: function(jqXHR, textStatus, errorThrown) {
    //    console.log("There was an error while saving document: " + textStatus);
    //    console.log(errorThrown);
    //    }
    //});
    });

  - if(typeof(widget.user_organizations) != "undefined")
      script
        var user_organizations = !{JSON.stringify(widget.user_organizations)};
  - else
      script
        var user_organizations = [];    
  
  script
    step#{step_id}FieldsList['!{widget.id}'] = new DocumentViewWidget(!{JSON.stringify(value)});
    (function(){
    var initDocumentWidgetFunction = function()
    {          
    var times = !{JSON.stringify(widget.organizations_times)};
    GenerateDocument_#{widget.doc_name}();
    RegionalizedData.GetDataFromDBWithRegion(GetUserRegion(), 'organizations', !{JSON.stringify(widget.organizations)}, function(fetchedData) {
        $("#documentOrganizationsView_#{widget.doc_name}").children().remove();
        
        for(var yauo in user_organizations)
        {
          var yauo_obj = { short_description : "user organization",
                           description       : {} };
          
          var allWidgetsDataArgument = CollectFormData();
          
          if(typeof(user_organizations[yauo].description) != "undefined")
            for(var d in user_organizations[yauo].description)
              if(typeof(allWidgetsDataArgument[user_organizations[yauo].description[d]]) != "undefined")          
                yauo_obj.description[d] = allWidgetsDataArgument[user_organizations[yauo].description[d]];
                
          if(typeof(allWidgetsDataArgument[user_organizations[yauo].widget_id]) != "undefined")          
            yauo_obj.title = allWidgetsDataArgument[user_organizations[yauo].widget_id];
          
          fetchedData.push([[yauo_obj]]);     
          times.push(user_organizations[yauo].wait_time);
        }        
        
        for(var k = 0; k < fetchedData.length; k++)
        {
          var data = fetchedData[k];
          for(var i = 0; i < data.length; i++)
          {    
              for(var j = 0; j < data[i].length; j++)
              {                           
                  var title = data[i][j]["title"];
                  var orgTitle = $("<div class='documentOrganizationsRecorTitle'></div>").append($("<span/>").html(data[i][j]["title"] + " (ответа ждать " + times[k] + " дней)"));
                  var savedValue = step#{step_id}FieldsList['!{widget.id}'].getValue();
                  if(typeof(savedValue[title]) != "undefined")
                      var orgTimer = $('<div/>').attr("org_title", title).attr("org_time", times[k]).addClass("documentOrganizationTimerActivated");
                  else
                      var orgTimer = $("<div/>").attr("org_title", title).attr("org_time", times[k]).addClass("documentOrganizationTimer");
                  $(orgTimer).click(function(){
                      if($(this).hasClass("documentOrganizationTimer"))
                      {
                          $(this).addClass("documentOrganizationTimerActivated").removeClass("documentOrganizationTimer");
                          step#{step_id}FieldsList['!{widget.id}'].timersValues[$(this).attr("org_title")] = {beginDate : new Date(),
                                                                                                              interval  : $(this).attr("org_time")};                                            
                      }
                      else
                      {
                          $(this).addClass("documentOrganizationTimer").removeClass("documentOrganizationTimerActivated");
                          delete step#{step_id}FieldsList['!{widget.id}'].timersValues[$(this).attr("org_title")];
                      }
                  });
                  var rec = $("<div class='documentOrganizationsRecord'></div>").append(orgTitle).append(orgTimer);
                  var cont = $("<div class='documentOrganizationsRecordDescription'></div>");
                  for(var key in data[i][j]["description"])
                  {
                      if(typeof(data[i][j]["description"][key]) == "object")
                      {
                          for(var key2 in data[i][j]["description"][key])
                          {
                              cont.append($("<div style='position:relative;'></div>").html(key2 + " = " + data[i][j]["description"][key][key2]));
                          }
                      }
                      else
                      {
                          if(data[i][j]["description"][key] != "")
                          {
                              if(key == "web")
                                  cont.append($("<a href='" + data[i][j]["description"][key] + "' style='position:relative;'>" + data[i][j]["description"][key] + "</a>"));
                              else
                                  cont.append($("<div style='position:relative;'></div>").html(key + " = " + data[i][j]["description"][key]));
                          }
                      }
                  }
                  rec.append(cont);
                  $("#documentOrganizationsView_#{widget.doc_name}").append(rec);                  
              }
          }
        }
        // If there is only one organization, keep it shown
        if($(".documentOrganizationsRecordDescription").length == 1)
            $(".documentOrganizationsRecordDescription").show();
        $(".documentOrganizationsRecord").click(function(){
            $(".documentOrganizationsRecord").children(".documentOrganizationsRecordDescription").hide();
            $(this).children(".documentOrganizationsRecordDescription").show();
        });
    });
    };
    $("#documentView_#{widget.doc_name}").closest(".step").watch("display", function(){     
            // Only regenerate document, organizations should be leaved unchanged
            // GenerateDocument_#{widget.doc_name}();
            
            // No, organizations list may change too
            initDocumentWidgetFunction();
       }, 100, "");
    if($("#documentView_#{widget.doc_name}").closest(".step").is(":visible"))
       setTimeout(function(){
           initDocumentWidgetFunction();
       }, 1000); // [TODO] #(document).ready() doesn't workk properly
    })();
    
