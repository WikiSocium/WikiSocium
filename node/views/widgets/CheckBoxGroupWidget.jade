//- На входе:
//- widget - данные о виджете из SolutionData (widget_type, id, label, value_list)
//- step.id - идентификатор шага
//- value - значение виджета

extends BaseWidget

//- Создание jade-блока (он не рендерится в html? => это не обязательно?)
block content
  //- Создаётся пустой блок с уникальным в рамках шага именем. К нему средствами jQuery будут приклеиваться остальные элементы разметки.
  <div id="CheckBoxGroupWidget_#{widget.id}">
  </div>
  script(type="text/javascript")
      //- Создаём функцию, создающую виджет.
      var CheckBoxGroupWidgetBody_#{widget.id} = function()
      {
          //- Пробуем распарсить переданное значение и создаём переменную, отвечающую за работу с виджетом.
          //- Сохраняем эту переменную в списке FieldList этого шага.
          var jsonValue = !{JSON.stringify(value) == null ? "undefined" : JSON.stringify(value)};
          var jsonInitial = !{JSON.stringify(widget.initial) == null ? "undefined" : JSON.stringify(widget.initial)};
          if(jsonValue == undefined)
            var wdgt = step#{step_id}FieldsList['!{widget.id}'] = new CheckBoxGroupWidget(jsonInitial);    
          else
            var wdgt = step#{step_id}FieldsList['!{widget.id}'] = new CheckBoxGroupWidget(jsonValue);    
          
          //- Указываем виджету минимальное и максимальное разрешённое количество галочек.
          wdgt.minSelection = (!{JSON.stringify(widget.min_selection)});
          wdgt.maxSelection = (!{JSON.stringify(widget.max_selection)});
            
          //- Функция-обработчик, вызываемая при изменении значения виджета (щелчку по галочке)
          var selectionChangedHandler = function(){
              //- $(this) - в данном случае объект, связанный с галочкой, по которой щёлкнул пользователь.
              var checkBoxVal = $(this).find(".CheckBoxGroupWidgetItem").attr("value");
              var checkBoxLabel = $(this).find(".CheckBoxGroupWidgetItemLabel").text();
              var checked = $(this).find(".CheckBoxGroupWidgetItem").is(":checked");
              if(checked == true)
                step#{step_id}FieldsList['#{widget.id}'].addValue(checkBoxVal, checkBoxLabel);
              else step#{step_id}FieldsList['#{widget.id}'].removeValue(checkBoxVal);
              
              // Скрытие/отображение пункта "другое"
              var otherValue = "other";
              if(checkBoxVal == otherValue)
              {
                var otherTextArea = $(this).closest(".CheckBoxGroupWidgetItemContainer").find(".CheckBoxGroupWidgetOtherTextBox");
                if(checked)
                  otherTextArea.show();
                else
                  otherTextArea.hide();
              }
              
              //- Обработчик изменения состояния виджета - для предикатов и т.п.
              OnWidgetChanged();
          };              
          
          //- Значение, которое нужно отметить в виджете как выбранное.
          var initial = wdgt.selection_list;
          //- Список галочек (отображаемый текст + уникальное значение (имя) галочки)
          var value_list = !{JSON.stringify(widget.value_list)};
          
          //- Отобразить виджет
          for(var i in value_list)
          {
              //- Переменная, описывающая чекбокс с проставленной или не проставленной (в зависимости от параметров) галочкой.
              var inpt = $("<input type='checkbox' class='CheckBoxGroupWidgetItem' style='float:left' selected/>").attr("value", value_list[i].value);
              //- Переменная, описывающая блок с текстом, соответствующем чекбоксу.
              var label = $("<div class='CheckBoxGroupWidgetItemLabel' style='float:left'/>").text(value_list[i].label);
              
              //- Если галочка в списке выделенных - выделить её.
              if(wdgt.checkValue(value_list[i].value))
                inpt.attr("checked", true);
              
              //- Контейнер с галочкой, текстом и обработчиком нажатия на галочку.
              var container = $("<div/>").addClass("CheckBoxGroupWidgetItemContainer").append(inpt).append(label).append("<br/>").click(selectionChangedHandler);
              //- Контейнер добавляется на страницу.
              $("#CheckBoxGroupWidget_#{widget.id}").append(container);
          }
          
          //- Обработка поля "Другое"
          
          var widgetData = !{JSON.stringify(widget)};
          var otherValue = "other";
          var defaultOtherLabel = "";
          if(widgetData.enableOther == "true")
          {
              if(widgetData.otherLabel != undefined)
                var otherLabel = widgetData.otherLabel;
              else var otherLabel = defaultOtherLabel;
              
              if(wdgt.otherText != undefined)
                var otherText = wdgt.otherText;
              else var otherText = "";
          
              //- Переменная, описывающая чекбокс с проставленной или не проставленной (в зависимости от параметров) галочкой.
              var inpt = $("<input type='checkbox' class='CheckBoxGroupWidgetItem' style='float:left' selected/>").attr("value", otherValue);
              //- Переменная, описывающая блок с текстом, соответствующем чекбоксу.
              var label = $("<div class='CheckBoxGroupWidgetItemLabel' style='float:left'/>").text(otherLabel);
              
              //- Текстовое поле
              var otherTextElement =  $("<textarea class='CheckBoxGroupWidgetOtherTextBox input-xlarge'/>").attr("value", otherText);
              
              //- Если галочка в списке выделенных - выделить её.
              if(wdgt.checkValue(otherValue))
              {
                inpt.attr("checked", true);
                otherTextElement.show();
              }
              else otherTextElement.hide();
              
              //- Обновить объект при изменении текста
              otherTextElement.change(
                function()
                {
                    wdgt.setOtherText($(this)[0].value);
                })
              
              //- Контейнер добавляется на страницу.
              var container = $("<div/>").addClass("CheckBoxGroupWidgetItemContainer").append(inpt).append(label).append("<br/>").click(selectionChangedHandler);
              container = container.append(otherTextElement).append("<br/>")
              $("#CheckBoxGroupWidget_#{widget.id}").append(container);
          }
      };
      
      //- Создать виджет.
      CheckBoxGroupWidgetBody_#{widget.id}();
